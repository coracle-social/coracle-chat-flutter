// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../nostr/models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Generate a new Nostr keypair
Future<KeypairResponse> generateKeypair() => RustLib.instance.api.crateApiNostrGenerateKeypair();

/// Sign a message with NIP-01
Future<SignedMessageResponse> signMessage({required String secretKey, required String message}) =>
    RustLib.instance.api.crateApiNostrSignMessage(secretKey: secretKey, message: message);

/// Verify a signed message
Future<bool> verifyMessage({required SignedMessageResponse signedMessage}) =>
    RustLib.instance.api.crateApiNostrVerifyMessage(signedMessage: signedMessage);

/// Create a profile metadata event (kind 0)
Future<SignedMessageResponse> createProfileEvent(
        {required String secretKey,
        required String name,
        String? displayName,
        String? about,
        String? picture,
        String? website}) =>
    RustLib.instance.api.crateApiNostrCreateProfileEvent(
        secretKey: secretKey, name: name, displayName: displayName, about: about, picture: picture, website: website);

/// Parse a Nostr URI (npub, nsec, nevent, etc.)
Future<NostrUriResponse> parseNostrUri({required String uri}) =>
    RustLib.instance.api.crateApiNostrParseNostrUri(uri: uri);

/// Parse profile metadata from JSON string
Future<ProfileMetadata> parseProfileMetadata({required String jsonContent}) =>
    RustLib.instance.api.crateApiNostrParseProfileMetadata(jsonContent: jsonContent);

/// Parse profile metadata with fallback error handling
Future<ProfileMetadata> parseProfileMetadataWithFallback({required String jsonContent}) =>
    RustLib.instance.api.crateApiNostrParseProfileMetadataWithFallback(jsonContent: jsonContent);

/// Validate Nostr URI format
Future<bool> validateNostrUri({required String uri}) => RustLib.instance.api.crateApiNostrValidateNostrUri(uri: uri);

/// Extract public key from various formats
Future<String> extractPublicKey({required String input}) =>
    RustLib.instance.api.crateApiNostrExtractPublicKey(input: input);

/// Create a simple text note event
Future<SignedMessageResponse> createTextNote(
        {required String secretKey, required String content, required List<List<String>> tags}) =>
    RustLib.instance.api.crateApiNostrCreateTextNote(secretKey: secretKey, content: content, tags: tags);

/// Derive public key from secret key
Future<KeypairResponse> derivePublicKey({required String secretKey}) =>
    RustLib.instance.api.crateApiNostrDerivePublicKey(secretKey: secretKey);
