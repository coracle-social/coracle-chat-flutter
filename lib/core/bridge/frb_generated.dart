// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/nostr.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'nostr/models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1289350029;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<int> crateApiSimpleAddNumbers({required int a, required int b});

  Future<int> crateApiSimpleCountCharacters({required String input});

  Future<SignedMessageResponse> crateApiNostrCreateProfileEvent(
      {required String secretKey,
      required String name,
      String? displayName,
      String? about,
      String? picture,
      String? website});

  Future<SignedMessageResponse> crateApiNostrCreateTextNote(
      {required String secretKey, required String content, required List<List<String>> tags});

  Future<KeypairResponse> crateApiNostrDerivePublicKey({required String secretKey});

  Future<String> crateApiNostrExtractPublicKey({required String input});

  Future<BigInt> crateApiSimpleFibonacci({required int n});

  Future<KeypairResponse> crateApiNostrGenerateKeypair();

  Future<String> crateApiSimpleGetGreeting({required String name});

  Future<Int32List> crateApiSimpleGetNumberList({required int count});

  Future<bool> crateApiSimpleIsPrime({required int n});

  Future<int> crateApiSimpleMultiplyNumbers({required int a, required int b});

  Future<NostrUriResponse> crateApiNostrParseNostrUri({required String uri});

  Future<ProfileMetadata> crateApiNostrParseProfileMetadata({required String jsonContent});

  Future<ProfileMetadata> crateApiNostrParseProfileMetadataWithFallback({required String jsonContent});

  Future<String> crateApiSimpleReverseString({required String input});

  Future<SignedMessageResponse> crateApiNostrSignMessage({required String secretKey, required String message});

  Future<bool> crateApiNostrValidateNostrUri({required String uri});

  Future<bool> crateApiNostrVerifyMessage({required SignedMessageResponse signedMessage});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<int> crateApiSimpleAddNumbers({required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleAddNumbersConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleAddNumbersConstMeta => const TaskConstMeta(
        debugName: "add_numbers",
        argNames: ["a", "b"],
      );

  @override
  Future<int> crateApiSimpleCountCharacters({required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleCountCharactersConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleCountCharactersConstMeta => const TaskConstMeta(
        debugName: "count_characters",
        argNames: ["input"],
      );

  @override
  Future<SignedMessageResponse> crateApiNostrCreateProfileEvent(
      {required String secretKey,
      required String name,
      String? displayName,
      String? about,
      String? picture,
      String? website}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        sse_encode_String(name, serializer);
        sse_encode_opt_String(displayName, serializer);
        sse_encode_opt_String(about, serializer);
        sse_encode_opt_String(picture, serializer);
        sse_encode_opt_String(website, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_signed_message_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrCreateProfileEventConstMeta,
      argValues: [secretKey, name, displayName, about, picture, website],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrCreateProfileEventConstMeta => const TaskConstMeta(
        debugName: "create_profile_event",
        argNames: ["secretKey", "name", "displayName", "about", "picture", "website"],
      );

  @override
  Future<SignedMessageResponse> crateApiNostrCreateTextNote(
      {required String secretKey, required String content, required List<List<String>> tags}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        sse_encode_String(content, serializer);
        sse_encode_list_list_String(tags, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_signed_message_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrCreateTextNoteConstMeta,
      argValues: [secretKey, content, tags],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrCreateTextNoteConstMeta => const TaskConstMeta(
        debugName: "create_text_note",
        argNames: ["secretKey", "content", "tags"],
      );

  @override
  Future<KeypairResponse> crateApiNostrDerivePublicKey({required String secretKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_keypair_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrDerivePublicKeyConstMeta,
      argValues: [secretKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrDerivePublicKeyConstMeta => const TaskConstMeta(
        debugName: "derive_public_key",
        argNames: ["secretKey"],
      );

  @override
  Future<String> crateApiNostrExtractPublicKey({required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrExtractPublicKeyConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrExtractPublicKeyConstMeta => const TaskConstMeta(
        debugName: "extract_public_key",
        argNames: ["input"],
      );

  @override
  Future<BigInt> crateApiSimpleFibonacci({required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleFibonacciConstMeta,
      argValues: [n],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleFibonacciConstMeta => const TaskConstMeta(
        debugName: "fibonacci",
        argNames: ["n"],
      );

  @override
  Future<KeypairResponse> crateApiNostrGenerateKeypair() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_keypair_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrGenerateKeypairConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrGenerateKeypairConstMeta => const TaskConstMeta(
        debugName: "generate_keypair",
        argNames: [],
      );

  @override
  Future<String> crateApiSimpleGetGreeting({required String name}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleGetGreetingConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetGreetingConstMeta => const TaskConstMeta(
        debugName: "get_greeting",
        argNames: ["name"],
      );

  @override
  Future<Int32List> crateApiSimpleGetNumberList({required int count}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(count, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleGetNumberListConstMeta,
      argValues: [count],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetNumberListConstMeta => const TaskConstMeta(
        debugName: "get_number_list",
        argNames: ["count"],
      );

  @override
  Future<bool> crateApiSimpleIsPrime({required int n}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleIsPrimeConstMeta,
      argValues: [n],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleIsPrimeConstMeta => const TaskConstMeta(
        debugName: "is_prime",
        argNames: ["n"],
      );

  @override
  Future<int> crateApiSimpleMultiplyNumbers({required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleMultiplyNumbersConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleMultiplyNumbersConstMeta => const TaskConstMeta(
        debugName: "multiply_numbers",
        argNames: ["a", "b"],
      );

  @override
  Future<NostrUriResponse> crateApiNostrParseNostrUri({required String uri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(uri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nostr_uri_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrParseNostrUriConstMeta,
      argValues: [uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrParseNostrUriConstMeta => const TaskConstMeta(
        debugName: "parse_nostr_uri",
        argNames: ["uri"],
      );

  @override
  Future<ProfileMetadata> crateApiNostrParseProfileMetadata({required String jsonContent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(jsonContent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_profile_metadata,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrParseProfileMetadataConstMeta,
      argValues: [jsonContent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrParseProfileMetadataConstMeta => const TaskConstMeta(
        debugName: "parse_profile_metadata",
        argNames: ["jsonContent"],
      );

  @override
  Future<ProfileMetadata> crateApiNostrParseProfileMetadataWithFallback({required String jsonContent}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(jsonContent, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_profile_metadata,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrParseProfileMetadataWithFallbackConstMeta,
      argValues: [jsonContent],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrParseProfileMetadataWithFallbackConstMeta => const TaskConstMeta(
        debugName: "parse_profile_metadata_with_fallback",
        argNames: ["jsonContent"],
      );

  @override
  Future<String> crateApiSimpleReverseString({required String input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleReverseStringConstMeta,
      argValues: [input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleReverseStringConstMeta => const TaskConstMeta(
        debugName: "reverse_string",
        argNames: ["input"],
      );

  @override
  Future<SignedMessageResponse> crateApiNostrSignMessage({required String secretKey, required String message}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(secretKey, serializer);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_signed_message_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrSignMessageConstMeta,
      argValues: [secretKey, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrSignMessageConstMeta => const TaskConstMeta(
        debugName: "sign_message",
        argNames: ["secretKey", "message"],
      );

  @override
  Future<bool> crateApiNostrValidateNostrUri({required String uri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(uri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNostrValidateNostrUriConstMeta,
      argValues: [uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrValidateNostrUriConstMeta => const TaskConstMeta(
        debugName: "validate_nostr_uri",
        argNames: ["uri"],
      );

  @override
  Future<bool> crateApiNostrVerifyMessage({required SignedMessageResponse signedMessage}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_signed_message_response(signedMessage, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNostrVerifyMessageConstMeta,
      argValues: [signedMessage],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNostrVerifyMessageConstMeta => const TaskConstMeta(
        debugName: "verify_message",
        argNames: ["signedMessage"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  SignedMessageResponse dco_decode_box_autoadd_signed_message_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_signed_message_response(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  KeypairResponse dco_decode_keypair_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return KeypairResponse(
      publicKey: dco_decode_String(arr[0]),
      secretKey: dco_decode_String(arr[1]),
      npub: dco_decode_String(arr[2]),
      nsec: dco_decode_String(arr[3]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<List<String>> dco_decode_list_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_String).toList();
  }

  @protected
  Int32List dco_decode_list_prim_i_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Int32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  NostrUriResponse dco_decode_nostr_uri_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return NostrUriResponse(
      uriType: dco_decode_String(arr[0]),
      data: dco_decode_String(arr[1]),
      bech32: dco_decode_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ProfileMetadata dco_decode_profile_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ProfileMetadata(
      name: dco_decode_String(arr[0]),
      displayName: dco_decode_opt_String(arr[1]),
      about: dco_decode_opt_String(arr[2]),
      picture: dco_decode_opt_String(arr[3]),
      website: dco_decode_opt_String(arr[4]),
      nip05: dco_decode_opt_String(arr[5]),
      lud16: dco_decode_opt_String(arr[6]),
    );
  }

  @protected
  SignedMessageResponse dco_decode_signed_message_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SignedMessageResponse(
      id: dco_decode_String(arr[0]),
      pubkey: dco_decode_String(arr[1]),
      createdAt: dco_decode_u_64(arr[2]),
      kind: dco_decode_u_64(arr[3]),
      tags: dco_decode_list_list_String(arr[4]),
      content: dco_decode_String(arr[5]),
      sig: dco_decode_String(arr[6]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  SignedMessageResponse sse_decode_box_autoadd_signed_message_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_signed_message_response(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  KeypairResponse sse_decode_keypair_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_publicKey = sse_decode_String(deserializer);
    var var_secretKey = sse_decode_String(deserializer);
    var var_npub = sse_decode_String(deserializer);
    var var_nsec = sse_decode_String(deserializer);
    return KeypairResponse(publicKey: var_publicKey, secretKey: var_secretKey, npub: var_npub, nsec: var_nsec);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<String>> sse_decode_list_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<String>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_String(deserializer));
    }
    return ans_;
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  NostrUriResponse sse_decode_nostr_uri_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_uriType = sse_decode_String(deserializer);
    var var_data = sse_decode_String(deserializer);
    var var_bech32 = sse_decode_String(deserializer);
    return NostrUriResponse(uriType: var_uriType, data: var_data, bech32: var_bech32);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProfileMetadata sse_decode_profile_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_displayName = sse_decode_opt_String(deserializer);
    var var_about = sse_decode_opt_String(deserializer);
    var var_picture = sse_decode_opt_String(deserializer);
    var var_website = sse_decode_opt_String(deserializer);
    var var_nip05 = sse_decode_opt_String(deserializer);
    var var_lud16 = sse_decode_opt_String(deserializer);
    return ProfileMetadata(
        name: var_name,
        displayName: var_displayName,
        about: var_about,
        picture: var_picture,
        website: var_website,
        nip05: var_nip05,
        lud16: var_lud16);
  }

  @protected
  SignedMessageResponse sse_decode_signed_message_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_pubkey = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_u_64(deserializer);
    var var_kind = sse_decode_u_64(deserializer);
    var var_tags = sse_decode_list_list_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_sig = sse_decode_String(deserializer);
    return SignedMessageResponse(
        id: var_id,
        pubkey: var_pubkey,
        createdAt: var_createdAt,
        kind: var_kind,
        tags: var_tags,
        content: var_content,
        sig: var_sig);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_signed_message_response(SignedMessageResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_signed_message_response(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_keypair_response(KeypairResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.publicKey, serializer);
    sse_encode_String(self.secretKey, serializer);
    sse_encode_String(self.npub, serializer);
    sse_encode_String(self.nsec, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_String(List<List<String>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_32_strict(Int32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_nostr_uri_response(NostrUriResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.uriType, serializer);
    sse_encode_String(self.data, serializer);
    sse_encode_String(self.bech32, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_profile_metadata(ProfileMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.displayName, serializer);
    sse_encode_opt_String(self.about, serializer);
    sse_encode_opt_String(self.picture, serializer);
    sse_encode_opt_String(self.website, serializer);
    sse_encode_opt_String(self.nip05, serializer);
    sse_encode_opt_String(self.lud16, serializer);
  }

  @protected
  void sse_encode_signed_message_response(SignedMessageResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.pubkey, serializer);
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_u_64(self.kind, serializer);
    sse_encode_list_list_String(self.tags, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_String(self.sig, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
